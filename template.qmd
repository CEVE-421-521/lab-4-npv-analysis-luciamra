---
title: "Lab 4: House Elevation NPV Analysis"
author: "Lucia Romero Alston (lmr12)"
jupyter: julia-1.10
date: 2024-02-08
week: 5
categories: [Lab]

format: 
    html: default

    # YOU DO NOT NEED BOTH PDF AND DOCX.
    # COMMENT OR DELETE THE ONE YOU DON'T WANT TO USE.
    pdf:
        documentclass: article
        fontsize: 11pt
        geometry:
            - margin=1in  
        number-sections: true
        code-line-numbers: true
    #docx: 
    #    toc: true
    #    fig-format: png
    #    number-sections: true
    #    code-line-numbers: true

# these are optional
# if you have cache=true, you'll need the jupyter-cache package installed
execute: 
  cache: true
  freeze: true

date-format: "ddd., MMM. D"
bibliography: references.bib
---

```{julia}
#| output: false
using CSV
using DataFrames
using DataFramesMeta
using Distributions
using Interpolations
using Plots
using StatsPlots
using Unitful

Plots.default(; margin=6Plots.mm)

include("depthdamage.jl")
```

## Building the Case Study
Here, we are using existing data to build a depth-damage function.
```{julia}
haz_fl_dept = CSV.read("data/haz_fl_dept.csv", DataFrame) # read in the file
desc = "Cafeteria Restaurant, structure"
row = @rsubset(haz_fl_dept, :Description == desc)[1, :] # select the row I want
dd = DepthDamageData(row) # extract the depth-damage data
damage_fn = get_depth_damage_function(dd.depths, dd.damages) # get the depth-damage function
```

Now we must offset the function by the height of the building we are annalyzing in relation to the guage. We can then run a Monte Carlo approach to estemate the expected cost of flooding.
```{julia}
gauge_dist = GeneralizedExtremeValue(5, 1, 0.1) # hypothetical gauge distribution
offset = 3.74 # hypothetical height from house to gauge
house_dist = GeneralizedExtremeValue(gauge_dist.μ - offset, gauge_dist.σ, gauge_dist.ξ)

samples = rand(house_dist, 100_000) .* 1u"ft"
damages = damage_fn.(samples)
expected_damages_pct = mean(damages)
```

These damages are expressed as a percentage of the value fo the house, so we must input data on the actual value of the house to turn this damage amount into cost. I used Zillow in Galveston to get a sense of the value of the homes in the area that I am analyzing. There is a significant range but tend to be around $400,000.
```{julia}
house_structure_value = 400000
expected_damages_usd = house_structure_value * expected_damages_pct / 100
```

To evaluate the cost of elevating we use a piecewise linear function that depends on the area of the hosue and how high we elevate. 
The following are some defined imputs that will be used in the creation of the NPV functions.
```{julia}
house_area = 4004u"ft^2"
house_value = 400000
elevation_cost = get_elevation_cost_function() # gives us a fitted interpolator
```

## Single Year Function
This function will tell us our costs and benefits in a single year looking at distribution of flooding, depth-damage function, cost of elevation, house value, and how high the house is elevated in the given year.

```{julia}
function single_year_cost_benefit(flood_dist, damage_fn, elevation_cost, house_area, house_value, Δh)
    
    # calculate the expected damages
    new_flood_dist = GeneralizedExtremeValue(flood_dist.μ - ustrip(Δh), flood_dist.σ, flood_dist.ξ) #this distribution takes into consideration the elevation of the home Δh

    samples = rand(new_flood_dist, 100_000) .* 1u"ft"
    damages = damage_fn.(samples)
    expected_damages_pct = mean(damages)

    expected_damages_usd = house_structure_value * expected_damages_pct / 100
    c_dmg = expected_damages_usd

    # calculate the cost of elevating
    c_constr = elevation_cost(Δh, house_area)

    # return the total cost and benefit
    return -c_constr - c_dmg
end
```

## NPV Function
This function will calculate the net present value (NPV) over a T year design window.

```{julia}
function npv_cost_benefit(house_dist, damage_fn, elevation_cost, house_area, house_value, Δh, T, discount_rate)
    time = 1:T # creating an array containing the time over which we will analyze
    expected_damages_usd = [] # an empty array that we will fill with our cost-benefits
    if time == 1
        year1 = single_year_cost_benefit(house_dist, damage_fn, elevation_cost, house_area, house_value, Δh)
        push!(expected_damages_usd, year1)
    else
        new_flood_dist = GeneralizedExtremeValue(house_dist.μ - ustrip(Δh), house_dist.σ, house_dist.ξ)
        otheryears = single_year_cost_benefit(new_flood_dist, damage_fn, elevation_cost, house_area, house_value, 0*u"ft")
        push!(expected_damages_usd, otheryears)
    end
    npv = sum(expected_damages_usd .* (1 - discount_rate) .^ (0:T)) # discounting the damages to net present value and adding together
    return npv
end
```

## House Elevation NPVs
Now that we have a function for the net present value (NPV) of a home for a given elevations. We can test it out at different elevations.

To begin, we will test the home at an elevation of Δh=3ft as per Galvestons guidelines for land development for above the floodplain.
```{julia}
h3 = npv_cost_benefit(house_dist, damage_fn, elevation_cost, house_area, house_value, 3.0*u"ft", 10, 0.05)
```

We also want to test the home at other elevations:
elevation (Δh) = 0 ft
```{julia}
h0 = npv_cost_benefit(house_dist, damage_fn, elevation_cost, house_area, house_value, 0*u"ft", 10, 0.05)
```

elevation (Δh) = 5 ft
```{julia}
h5 = npv_cost_benefit(house_dist, damage_fn, elevation_cost, house_area, house_value, 5*u"ft", 10, 0.05)
```

elevation (Δh) = 7 ft
```{julia}
h7 = npv_cost_benefit(house_dist, damage_fn, elevation_cost, house_area, house_value, 7*u"ft", 10, 0.05)
```

elevation (Δh) = 9 ft
```{julia}
h9 = npv_cost_benefit(house_dist, damage_fn, elevation_cost, house_area, house_value, 9*u"ft", 10, 0.05)
```

elevation (Δh) = 11 ft
```{julia}
h11 = npv_cost_benefit(house_dist, damage_fn, elevation_cost, house_area, house_value, 11*u"ft", 10, 0.05)
```

elevation (Δh) = 13 ft
```{julia}
h13 = npv_cost_benefit(house_dist, damage_fn, elevation_cost, house_area, house_value, 13*u"ft", 10, 0.05)
```

elevation (Δh) = 15 ft
```{julia}
h15 = npv_cost_benefit(house_dist, damage_fn, elevation_cost, house_area, house_value, 15*u"ft", 10, 0.05)
```

elevation (Δh) = 17 ft
```{julia}
h15 = npv_cost_benefit(house_dist, damage_fn, elevation_cost, house_area, house_value, 17*u"ft", 10, 0.05)
```

At my prediction of Δh=3ft the NPV of costs of construction and damages was around $78,000 compared to the cost of not elevating at all which was aroung $55,000. This goes to show that elevating your home only a little bit can actually cost you more for the price of elevation if it is not enough to make an actual difference when it comes to flooding. As Δh went increasing, costs significantly dropped. Even at Δh=5ft, the cost of elevation and its benefits was around $18,000, saving about $60,000 for a two foot difference. Moving into the double digits (11+), the cost cut down to be in the hundreds, saving any homeowner tens of thousands of dollars in flooding costs. 

## Sensitivity Analysis
Assuming the discount rate is uncertain, we can use the Monte Carlo Aapproach to estimate the expected NPV for a range of discount rates.

```{julia}
N=20
discount_rate_dist = Normal(0.5, 0.5) # the normal distribution of our uncertain discount rate
sample3 = rand(discount_rate_dist, N) # taking N random values from our discount rate distribution
result3 = npv_cost_benefit.(house_dist, damage_fn, elevation_cost, house_area, house_value, 3.0*u"ft", 10, sample3) # finding the NPVs for the N different discount rates, still assuming Δh=3ft
mean(result3) # the mean of the NPVs to estimate over a range of discount rates
```

## Discussion
The NPV for different actions can vary significantly even for different types of actions. For instance, we found that varying the Δh by only 2ft can cause a difference of about $60,000. This is extremely important because it helps developers and homeowners understand the importance of building and elevating intentionally. Also, it is clear that the discount rate has a significant effect on the NPV. When analyzed at a height Δh=3ft and a discount rate of 0.05, the NPV=-($78,621.40), but when the discount rate was varied in the Monte Carlo approach and height remained constant, the resulting NPV was NPV=-($39,315.76). This difference for the same height is significant, meaning homeowners and developers should pay close attention to economy when planning to raise their homes.

When running tests and making models like this, it is important to consider that they are not real life, only an immitation of it. There are certain factors that are not included in this analysis that might have affects on the NPV of elevating ones home in real life. These include geographical and soil properties, local and regional politics, climate change, water properties and building ages. These may affect the results because it might make it more difficult or more expensive to elevate the home, making the cost outweigh the benefit more than what is preferred. Local politics can have a huge effect on a home owners likeliness and ability to elevate their home, through making it more accessable and providing aid, or just the opposite, blocking it and making it more difficult or expensive. To adress these limitations, this kind of model can be used as a basis to express trends in elevation, instead of for exact results. home owners and engineers can look to this sort of model to understand the trend that house elevation lovers the costs and damages due to flooding. It can also be combined with other kinds of models thta model other kinds of data in order to try to understand a more clear and overarching picture of the "state of the world".